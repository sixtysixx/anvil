---

---

<link
  href="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.10/main.min.css"
  rel="stylesheet"
/>
<link
  href="https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.10/main.min.css"
  rel="stylesheet"
/>

<!-- HTML Structure -->
<!-- This wrapper div will contain our entire calendar -->
<div class="calendar-wrapper">
  <!-- This is where FullCalendar will be initialized -->
  <div id="calendar"></div>
</div>

<script>
  import { Calendar } from "@fullcalendar/core";
  import dayGridPlugin from "@fullcalendar/daygrid";
  import interactionPlugin from "@fullcalendar/interaction";

  document.addEventListener("DOMContentLoaded", function () {
    const calendarEl = document.getElementById("calendar");

    // Load saved events from localStorage
    const savedEvents = JSON.parse(
      localStorage.getItem("calendarEvents") || "[]",
    );

    const calendar = new Calendar(calendarEl, {
      plugins: [dayGridPlugin, interactionPlugin],
      initialView: "dayGridMonth",
      headerToolbar: {
        left: "prev,next today",
        center: "title",
        right: "dayGridMonth,dayGridWeek",
      },
      editable: true,
      selectable: true,
      events: savedEvents,
      select: function (info) {
        const title = prompt("Enter event title:");
        if (title) {
          const newEvent = {
            title: title,
            start: info.startStr,
            end: info.endStr,
            allDay: info.allDay,
          };
          calendar.addEvent(newEvent);

          // Save to localStorage
          const events = calendar.getEvents().map((e) => ({
            title: e.title,
            start: e.startStr,
            end: e.endStr,
            allDay: e.allDay,
          }));
          localStorage.setItem("calendarEvents", JSON.stringify(events));
        }
      },
      eventClick: function (info) {
        if (confirm("Delete event?")) {
          info.event.remove();

          // Update localStorage after deletion
          const events = calendar.getEvents().map((e) => ({
            title: e.title,
            start: e.startStr,
            end: e.endStr,
            allDay: e.allDay,
          }));
          localStorage.setItem("calendarEvents", JSON.stringify(events));
        }
      },
    });

    calendar.render();
  });
</script>

<!-- Styling -->
<style>
  .calendar-wrapper {
    width: 100%;
    max-width: 1200px;
    margin: 20px auto;
    padding: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  #calendar {
    width: 100%;
    height: 100%;
    min-height: 500px;
  }
</style>

<div class="calendar-container">
  <!-- Calendar section -->
  <div class="calendar-wrapper">
    <div id="calendar"></div>
  </div>

  <!-- Notes section -->
  <div class="notes-wrapper">
    <h2>Notes</h2>
    <div class="notes-input">
      <div class="input-group">
        <textarea id="notes-area" placeholder="Add your notes here..."
        ></textarea>
        <button id="save-note">Save Note</button>
      </div>
    </div>
    <div id="notes-list">
      <!-- Notes will be added here dynamically -->
    </div>
  </div>
</div>

<style>
  .calendar-container {
    display: flex;
    gap: 20px;
    width: 100%;
    max-width: 1600px;
    margin: 20px auto;
  }

  .calendar-wrapper {
    flex: 2;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
  }

  .notes-wrapper {
    flex: 1;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
  }

  .notes-input {
    margin-bottom: 20px;
  }

  .input-group {
    display: flex;
    gap: 10px;
    align-items: flex-start;
  }

  #notes-area {
    flex: 1;
    min-height: 100px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    resize: vertical;
  }

  #save-note {
    background: #4caf50;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    white-space: nowrap;
  }

  #save-note:hover {
    background: #45a049;
  }

  #notes-list {
    max-height: 400px;
    overflow-y: auto;
  }

  .note-item {
    padding: 10px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .note-item:last-child {
    border-bottom: none;
  }

  .delete-note {
    background: transparent;
    color: #666;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: all 0.2s ease;
  }

  .delete-note:hover {
    color: #ff4444;
    background: rgba(255, 68, 68, 0.1);
  }

  .note-content {
    flex-grow: 1;
    margin-right: 10px;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const saveNoteBtn = document.getElementById("save-note");
    const notesArea = document.getElementById("notes-area");
    const notesList = document.getElementById("notes-list");

    function createNoteElement(note, index) {
      const noteElement = document.createElement("div");
      noteElement.className = "note-item";

      const noteContent = document.createElement("div");
      noteContent.className = "note-content";
      noteContent.textContent = note.text;

      const timeElement = document.createElement("small");
      timeElement.textContent = ` (${note.timestamp})`;
      noteContent.appendChild(timeElement);

      const deleteButton = document.createElement("button");
      deleteButton.className = "delete-note";
      deleteButton.innerHTML = "&#x2715;"; // X symbol
      deleteButton.title = "Delete note";
      deleteButton.onclick = () => deleteNote(index);

      noteElement.appendChild(noteContent);
      noteElement.appendChild(deleteButton);

      return noteElement;
    }

    function deleteNote(index) {
      if (confirm("Are you sure you want to delete this note?")) {
        const savedNotes = JSON.parse(localStorage.getItem("notes") || "[]");
        savedNotes.splice(index, 1);
        localStorage.setItem("notes", JSON.stringify(savedNotes));
        renderNotes();
      }
    }

    function renderNotes() {
      notesList.innerHTML = "";
      const savedNotes = JSON.parse(localStorage.getItem("notes") || "[]");
      savedNotes.forEach((note, index) => {
        const noteElement = createNoteElement(note, index);
        notesList.appendChild(noteElement);
      });
    }

    // Initial render
    renderNotes();

    saveNoteBtn.addEventListener("click", function () {
      const noteText = notesArea.value.trim();
      if (noteText) {
        const timestamp = new Date().toLocaleString();
        const savedNotes = JSON.parse(localStorage.getItem("notes") || "[]");
        savedNotes.unshift({
          text: noteText,
          timestamp: timestamp,
        });
        localStorage.setItem("notes", JSON.stringify(savedNotes));
        notesArea.value = "";
        renderNotes();
      }
    });
  });
</script>
