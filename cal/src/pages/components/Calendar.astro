---

---

<link
  href="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.10/main.min.css"
  rel="stylesheet"
/>
<link
  href="https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.10/main.min.css"
  rel="stylesheet"
/>

<!-- HTML Structure -->
<!-- This wrapper div will contain our entire calendar -->
<div class="calendar-wrapper">
  <!-- This is where FullCalendar will be initialized -->
  <div id="calendar"></div>
</div>

<script>
  import { supabase } from '../lib/supabase';
  import { Calendar } from "@fullcalendar/core";
  import dayGridPlugin from "@fullcalendar/daygrid";
  import interactionPlugin from "@fullcalendar/interaction";

  // Add these new functions
  async function loadEvents() {
    try {
      const { data, error } = await supabase
        .from('events')
        .select('*');

      if (error) throw error;

      return data.map(event => ({
        id: event.id,
        title: event.title,
        start: event.start_date,
        end: event.end_date,
        description: event.description,
        backgroundColor: event.color,
        category: event.category
      }));
      } finally {
    toggleLoading(false);
  }
  }

  async function saveEvent(eventData) {
    try {
      const { data, error } = await supabase
        .from('events')
        .insert([{
          title: eventData.title,
          description: eventData.description || '',
          start_date: eventData.start,
          end_date: eventData.end,
          category: eventData.category || 'default',
          color: eventData.backgroundColor
        }]);

      if (error) throw error;
      return data[0];
    } catch (error) {
      console.error('Error saving event:', error);
      alert('Failed to save event');
    }
  }

  async function deleteEvent(eventId) {
    try {
      const { error } = await supabase
        .from('events')
        .delete()
        .eq('id', eventId);

      if (error) throw error;
    } catch (error) {
      console.error('Error deleting event:', error);
      alert('Failed to delete event');
    }
  }

  document.addEventListener("DOMContentLoaded", async function () {
    const calendarEl = document.getElementById("calendar");

    // Load saved events from localStorage
    const savedEvents = JSON.parse(
      localStorage.getItem("calendarEvents") || "[]",
    );

    const calendar = new FullCalendar.Calendar(calendarEl, {
      plugins: [dayGridPlugin, interactionPlugin],
      initialView: "dayGridMonth",
      headerToolbar: {
        left: "prev,next today",
        center: "title",
        right: "dayGridMonth,dayGridWeek",
      },
      editable: true,
      selectable: true,
      events: savedEvents,
      select: async function(info) {
          const title = prompt('Enter event title:');
          if (title) {
            const eventData = {
              title,
              start: info.startStr,
              end: info.endStr,
              backgroundColor: '#3788d8'
            };

            await saveEvent(eventData);
            calendar.refetchEvents();
          }
        },
      events: events, {
        const title = prompt("Enter event title:");
        if (title) {
          const newEvent = {
            title: title,
            start: info.startStr,
            end: info.endStr,
            allDay: info.allDay,
          };
          calendar.addEvent(newEvent);

          // Save to localStorage
          const events = await loadEvents();

            title: e.title,
            start: e.startStr,
            end: e.endStr,
            allDay: e.allDay,
          }));
          localStorage.setItem("calendarEvents", JSON.stringify(events));
        }
      },
      eventClick: async function(info) {
        if (confirm('Delete this event?')) {
          await deleteEvent(info.event.id);
          info.event.remove();
        }
      },
      eventChange: async function(info) {
        try {
          const { error } = await supabase
            .from('events')
            .update({
              start_date: info.event.startStr,
              end_date: info.event.endStr
            })
            .eq('id', info.event.id);

          if (error) throw error;
        } catch (error) {
          console.error('Error updating event:', error);
          info.revert();
          alert('Failed to update event');
        }
      },
    });

    calendar.render();
  });
  function toggleLoading(show) {
    document.getElementById('loadingIndicator').classList.toggle('hidden', !show);
}
</script>

<!-- Styling -->
<style>
  .calendar-wrapper {
    width: 100%;
    max-width: 1200px;
    margin: 20px auto;
    padding: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  #calendar {
    width: 100%;
    height: 100%;
    min-height: 500px;
  }
</style>

<div class="calendar-container">
  <!-- Calendar section -->
  <div class="calendar-wrapper">
    <div id="calendar"></div>
  </div>
</div>

<style>
  .calendar-container {
    display: flex;
    gap: 20px;
    width: 100%;
    max-width: 1600px;
    margin: 20px auto;
  }

  .calendar-wrapper {
    flex: 2;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
  }

  .loading-indicator {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 20px;
  border-radius: 8px;
  z-index: 1000;
}

.hidden {
  display: none;
}

</style>
