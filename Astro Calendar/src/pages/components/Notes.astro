<body>
  <div class="notes-wrapper">
    <h2>Notes</h2>
    <div class="notes-input">
      <div class="input-group">
        <textarea id="notes-area" placeholder="Add your notes here..."
        ></textarea>
        <button id="save-note">Save Note</button>
      </div>
    </div>
    <div id="notes-list">
      <!-- Notes will be added here dynamically -->
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", async function () {
      // Initialize Supabase client
      const { createClient } = supabase;
      const supabaseUrl = "YOUR_SUPABASE_URL";
      const supabaseKey = "YOUR_SUPABASE_ANON_KEY";
      const supabase = createClient(supabaseUrl, supabaseKey);

      // Set up real-time subscription
      const subscription = supabase
        .from("notes")
        .on("*", (payload) => {
          renderNotes();
        })
        .subscribe();

      const saveNoteBtn = document.getElementById("save-note");
      const notesArea = document.getElementById("notes-area");
      const notesList = document.getElementById("notes-list");

      function createNoteElement(note, index) {
        const noteElement = document.createElement("div");
        noteElement.className = "note-item";

        const noteContent = document.createElement("div");
        noteContent.className = "note-content";
        noteContent.textContent = note.text;

        const timeElement = document.createElement("small");
        timeElement.textContent = ` (${note.created_at})`;
        noteContent.appendChild(timeElement);

        const deleteButton = document.createElement("button");
        deleteButton.className = "delete-note";
        deleteButton.innerHTML = "&#x2715;"; // X symbol
        deleteButton.title = "Delete note";
        deleteButton.onclick = () => deleteNote(note.id);

        noteElement.appendChild(noteContent);
        noteElement.appendChild(deleteButton);

        return noteElement;
      }

      async function deleteNote(id) {
        if (confirm("Are you sure you want to delete this note?")) {
          const { error } = await supabase.from("notes").delete().eq("id", id);

          if (error) {
            console.error("Error deleting note:", error);
          }
        }
      }

      async function renderNotes() {
        notesList.innerHTML = "";

        const { data: notes, error } = await supabase
          .from("notes")
          .select("*")
          .order("created_at", { ascending: false });

        if (error) {
          console.error("Error fetching notes:", error);
          return;
        }

        notes.forEach((note, index) => {
          const noteElement = createNoteElement(note, index);
          notesList.appendChild(noteElement);
        });
      }

      // Initial render
      renderNotes();

      saveNoteBtn.addEventListener("click", async function () {
        const noteText = notesArea.value.trim();
        if (noteText) {
          const { error } = await supabase
            .from("notes")
            .insert([{ text: noteText }]);

          if (!error) {
            notesArea.value = "";
          } else {
            console.error("Error saving note:", error);
          }
        }
      });
    });
  </script>
</body>
<style>
  .notes-input {
    margin-bottom: 20px;
  }

  .input-group {
    display: flex;
    gap: 10px;
    align-items: flex-start;
  }

  #notes-area {
    flex: 1;
    min-height: 883px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    resize: vertical;
    height:;
  }

  #save-note {
    background: #4caf50;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    white-space: nowrap;
  }

  #save-note:hover {
    background: #45a049;
  }

  #notes-list {
    max-height: 400px;
    overflow-y: auto;
  }

  .note-item {
    padding: 10px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .note-item:last-child {
    border-bottom: none;
  }

  .delete-note {
    background: transparent;
    color: #666;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: all 0.2s ease;
  }

  .delete-note:hover {
    color: #ff4444;
    background: rgba(255, 68, 68, 0.1);
  }

  .note-content {
    flex-grow: 1;
    margin-right: 10px;
  }

  .notes-wrapper {
    flex: 1;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
  }
</style>
